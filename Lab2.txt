Step1:
    clone a spring boot project:
    git clone --depth=1 https://github.com/GoogleCloudPlatform/training-data-analyst
     ln -s ~/training-data-analyst/courses/java-microservices/spring-cloud-gcp-guestbook
      ~/spring-cloud-gcp-guestbook
step2:
    cp -a ~/spring-cloud-gcp-guestbook/1-bootstrap/guestbook-service ~/guestbook-service
    cp -a ~/spring-cloud-gcp-guestbook/1-bootstrap/guestbook-frontend ~/guestbook-frontend
step3:
    crating the cloudSQL instance ,database,table
    enable cloudsql admin api .
    gcloud services enable sqladmin.googleapis.com
    conform the cloudSQL admin api enable :
    $gcloud services list | grep sqladmin
    list all cloudSQL instances.
    $gcloud sql instances list
    create an instance
    $gcloud sql instances create guestbook --region=us-central1
    create a database in cloudSQL instance 
    $gcloud sql databases create messages --instance guestbook

    connect to the database with gcloud
    $gcloud sql connect guestbook 

    $show databases;
    $use messages;
    create a tbale in DB 
    CREATE TABLE guestbook_message (
  id BIGINT NOT NULL AUTO_INCREMENT,
  name CHAR(128) NOT NULL,
  message CHAR(255),
  image_uri CHAR(255),
  PRIMARY KEY (id)
);

$exit 


add dependency :
      <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-gcp-starter-sql-mysql</artifactId>
      </dependency>

      application properties:
      spring.cloud.gcp.sql.enabled=false

step:4
    configure application to use the cloud sql
    serch for db connection name as:
     $gcloud sql instances describe guestbook --format='value(connectionName)'  -->return as a string(cloud sql object  instance connection name)

    create a diff application-cloud.properties file in servie dir

    spring.cloud.gcp.sql.enabled=true
    spring.cloud.gcp.sql.database-name=messages
    spring.cloud.gcp.sql.instance-connection-name=YOUR_INSTANCE_CONNECTION_NAME --> string we obtain in above db 

    spring.datasource.hikari.maximum-pool-size=5


    step-5:
        Test the service folder
        cd ~/guestbook-service 
        ./mvnw test 

        ./mvnq spring-boot:run  -Dspring-boot.run.jvmArguments="-Dspring.profiles.active=cloud" 
           

step-5:
    Send data to the service
    curl -X POST -H "content-type: application/json"  -d '{ "name":"Rakesh" ,"message":"hello"}' 
      http://localhost:8081/guestbookMessages

    //list all data 
    curl http://localhost:8081/guestbookMessages 


    step-6:
        gcloud sql connect <instance_name>
        perform the sql operations to checkj the data in DB


